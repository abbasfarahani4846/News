@model News.Models.Db.News
@{
    ViewData["Title"] = "Edit";
    ViewData["SubTitle"] = Model.Title;
}
<div class="row">
    <div class="col-md-12">
        <form asp-action="Edit" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <input type="hidden" asp-for="CreatedAt" />
            <input type="hidden" asp-for="ViewCount" />
            <input type="hidden" asp-for="ImageName" />
         
            <div class="form-group">
                <label asp-for="Title" class="control-label"></label>
                <input asp-for="Title" class="form-control" />
                <span asp-validation-for="Title" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="ShortDescription" class="control-label"></label>
                <input asp-for="ShortDescription" class="form-control" />
                <span asp-validation-for="ShortDescription" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="LongDescription" class="control-label"></label>
                <textarea id="editor" asp-for="LongDescription"></textarea>
                <span asp-validation-for="LongDescription" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label class="control-label">
                    Category
                </label>
                <select asp-for="CategoryId" asp-items="ViewBag.Categories" class="form-control">
                    <option>
                        ------------  Select Category ------------
                    </option>
                </select>
                <span asp-validation-for="CategoryId" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label class="control-label">
                    Tags
                </label>
                <select name="Tags" id="Tags" asp-items="ViewBag.Tags" class="form-control" multiple="multiple">
                </select>
                <span asp-validation-for="Tags" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label class="control-label">
                    Users
                </label>
                <select asp-for="UserId" asp-items="ViewBag.Users" class="form-control">
                </select>
                <span asp-validation-for="UserId" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Status" class="control-label"></label>
                <select asp-for="Status" class="form-control">
                    <option value="PUBLISH">
                        PUBLISH
                    </option>
                    <option value="UNPUBLISH">
                        UNPUBLISH
                    </option>
                </select>
                <span asp-validation-for="Status" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="ImageName" class="control-label"></label>
                <input type="file" name="image" class="form-control" />
                <br />
                @if (!string.IsNullOrEmpty(Model.ImageName))
                {
                    <img src="/images/news/@Model.ImageName" alt="News Image" style="max-width:150px;" />
                }
                <span asp-validation-for="ImageName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    <link href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
        // Initialize Select2 for the CategoryId dropdown
        $('#CategoryId').select2();
        // Initialize Select2 for the Tags dropdown
        $('#Tags').select2();
    </script>



    <script src="https://cdn.ckeditor.com/ckeditor5/41.4.2/classic/ckeditor.js"></script>

    <script>
        // Custom Upload Adapter for CKEditor
        class MyUploadAdapter {
            // Initializes the adapter with the CKEditor loader instance
            constructor(loader) {
                // The file loader instance to use during the upload.
                this.loader = loader;
            }

            // Starts the upload process
            upload() {
                // Returns a promise that resolves with the uploaded file data
                return this.loader.file
                    .then(file => {
                        // Create a new FormData object to send the file
                        const data = new FormData();
                        data.append('upload', file); // 'upload' is the expected key by the server

                        // Send the file to the server endpoint using fetch
                        return fetch('/Admin/News/UploadImage', {
                            method: 'POST', // Use POST method
                            body: data      // Set the FormData as the request body
                        })
                        .then(response => {
                            // Check if the server response is successful
                            if (!response.ok) {
                                // Throw an error if the upload failed
                                throw new Error('Upload failed');
                            }
                            // Parse the JSON response from the server
                            return response.json();
                        })
                        .then(result => {
                            // CKEditor expects the response in a specific format: { default: 'image_url' }
                            // Return the object with the 'default' key pointing to the image URL
                            return { default: result.url };
                        });
                    });
            }

            // Aborts the upload process
            abort() {
                // This method is optional and can be implemented to handle upload cancellation
                // For example, if you were using XMLHttpRequest, you could call xhr.abort() here.
            }
        }

        // Plugin to integrate the custom upload adapter with CKEditor
        function MyCustomUploadAdapterPlugin(editor) {
            // Registers the custom adapter with the editor's FileRepository
            // When a file is added, CKEditor will use MyUploadAdapter to handle it
            editor.plugins.get('FileRepository').createUploadAdapter = (loader) => {
                return new MyUploadAdapter(loader);
            };
        }

        // Variable to hold the CKEditor instance
        let editor;

        // Initialize ClassicEditor on the element with id 'editor'
        ClassicEditor
            .create(document.querySelector('#editor'), {
                // Load the custom upload adapter plugin
                extraPlugins: [MyCustomUploadAdapterPlugin],
                // Set the editor language (e.g., 'en', 'fa')
                language: 'en'
            })
            .then(newEditor => {
                // Store the editor instance in the global variable
                editor = newEditor;

                // Check if this is an 'Edit' page by looking for the LongDescription textarea
                const longDescTextarea = document.querySelector("textarea[name='LongDescription']");

                // If the textarea exists and has content, load it into the editor
                if (longDescTextarea && longDescTextarea.value) {
                    editor.setData(longDescTextarea.value);
                }
            })
            .catch(error => {
                // Log any errors during editor initialization
                console.error('Error initializing CKEditor:', error);
            });

        // Add a submit event listener to the form
        document.querySelector('form').addEventListener('submit', function () {
            // Before submitting the form, check if the editor instance exists
            if (editor) {
                // Update the hidden textarea's value with the current content from CKEditor
                // This ensures the editor's content is sent to the server
                document.querySelector("textarea[name='LongDescription']").value = editor.getData();
            }
        });
    </script>

    @{
        // Render the standard ASP.NET validation scripts (like jQuery Unobtrusive Validation)
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
}